<?xml version="1.0"?>	
<launch>  
<!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find robot1_gazebo)/worlds/velodyne.world"/> <!-- Note: the world_name is with respect to GAZEBO_RESOURCE_PATH environmental variable -->
    <arg name="paused" value="false"/>
    <arg name="use_sim_time" value="true"/>
    <arg name="gui" value="true"/>
    <arg name="headless" value="false"/> <!-- Inert - see gazebo_ros_pkgs issue #491 -->
    <arg name="recording" value="false"/>
    <arg name="debug" value="false"/>
    <arg name="verbose" value="true"/>
  </include>

  <!-- Load the URDF into the ROS Parameter Server -->
  <param name="robot_description"
         command="$(find xacro)/xacro --inorder '$(find robot1_description)/urdf/robot1_base_02.xacro'" />

  <node
    name="tf_footprint_base"
    pkg="tf"
    type="static_transform_publisher"
    args="0 0 0 0 0 0 base_link base_footprint 40" />
<!--  <node
    name="spawn_model"
    pkg="gazebo_ros"
    type="spawn_model"
    args="-file $(find robot1_description)/urdf/robot1_description.urdf -urdf -model robot1_description"
    output="screen" />
-->  <node
    name="fake_joint_calibration"
    pkg="rostopic"
    type="rostopic"
    args="pub /calibrated std_msgs/Bool true" />


  <!-- ros_control racecar launch file -->
  <!--include file="$(find robot1_control)/launch/robot1_control.launch"/-->
  <rosparam file="$(find robot1_control)/config/robot1_control.yaml" command="load"/>

  <!-- load the controllers -->
  <node 
    name="controller_manager" 
    pkg="controller_manager" 
    type="spawner" 
    respawn="true"
    output="screen" 
    ns="/simple_model"
    args="base_to_wheel1_velocity_controller 

          base_to_wheel2_velocity_controller
                                            
          base_to_wheel3_velocity_controller 

          base_to_wheel4_velocity_controller
                                            
          joint_state_controller"/>

  <!-- 运行robot_state_publisher节点，发布tf  -->
  <!-- convert joint states to TF transforms for rviz, etc -->                               
  <node name="robot_state_publisher" pkg="robot_state_publisher"  type="robot_state_publisher" respawn = "false" output="screen">
  </node>
  <!-- 运行rviz可视化界面 -->
  <!--node name="rviz" pkg="rviz" type="rviz" args="-d $(find robot1_description)/urdf.rviz" required="true" /-->
  <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
   <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
        args="-urdf -model robot1 -param robot_description -z 0.05"/>

</launch>
