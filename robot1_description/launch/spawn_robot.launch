<launch>
    <!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched -->
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find robot1_gazebo)/worlds/velodyne.world"/> <!-- Note: the world_name is with respect to GAZEBO_RESOURCE_PATH environmental variable -->
    <arg name="paused" value="false"/>
    <arg name="use_sim_time" value="true"/>
    <arg name="gui" value="true"/>
    <arg name="headless" value="false"/> <!-- Inert - see gazebo_ros_pkgs issue #491 -->
    <arg name="recording" value="false"/>
    <arg name="debug" value="false"/>
    <arg name="verbose" value="true"/>
    </include>
    <!-- Load the URDF into the ROS Parameter Server -->
    <param name="robot_description"
         command="$(find xacro)/xacro --inorder '$(find robot1_description)/urdf/robot1_base_02.xacro'" />
         
      <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
   <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
        args="-urdf -model robot1 -param robot_description -z 0.05"/>

    <!-- load controllers -->>
    <rosparam file="$(find robot1_description)/config/config.yaml" command="load"/>
    <node name="controller_manager" pkg="controller_manager" type="spawner" ns="/simple_model" 
          args="base_to_wheel1_velocity_controller 
                base_to_wheel2_velocity_controller                              
                base_to_wheel3_velocity_controller 
                base_to_wheel4_velocity_controller
                joint_state_controller --shutdown-timeout 3"/>
    <!-- converts joint states to TF transforms -->>
    <node name="robot_state_publisher" pkg="robot_state_publisher"  type="robot_state_publisher" respawn = "false" output="screen">
        <remap from= "/joint_states" to= "/simple_model/joint_states"/>
    </node>

</launch> 